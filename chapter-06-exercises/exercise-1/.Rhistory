fav_1 <- 8 / sqrt(201)
fav_2 <- 88 / sqrt(201)
fav_1 <- 8 / sqrt(201)
fav_2 <- 88 / sqrt(201)
print(fav_1)
print(fav_2)
fav_1 <- 8 / sqrt(201)
fav_2 <- 88 / sqrt(201)
print(fav_1)
print(fav_2)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, digits = 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
print(max(round_sum, sum_round))
fruits_e <- gsub("a", "ee", fruits)
print(fruits_e)
m <- seq(10,1)
print(m)
n - m
n <- 10:49
print(n)
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
add_1 <- c(1)
length(n + add_1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
print(m)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
all_numbers <- first_ten, next_ten
all_numbers <- paste(first_ten, next_ten)
next_ten <- seq(21, 30)
all_numbers <- paste(first_ten, next_ten)
all_numbers <- seq(first_ten, next_ten)
all_numbers <- c(first_ten, next_ten)
eleventh <- all_numbers[11]
some_numbers <- all_numbers[2:5]
even <- seq(1, 100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
all(TRUE, even %% 2 == 0)
prefix <- phone_numbers[1:3]
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
phone_numbers <- gsub(large, "5", phone_numbers)
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large, "5", phone_numbers)
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(phone_numbers > 5, 5, phone_numbers)
my_breakfast <- c("rice", "soup")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("boiling_point")
meals <- c(my_lunch, my_breakfast)
dinner <- meals$dinner
dinner <- meals$dinner
dinner <- c("meat")
meals <- list(my_breakfast, my_lunch, dinner)
meals$dinner
meals[[my_lunch]]
meals <- c(my_breakfast, my_lunch, dinner)
meals$dinner
meals[[my_lunch]]
meals$dinner
meals
meals
type(my_breakfast)
typeof(my_breakfast)
dinner <- c("meat")
meals <- list(my_breakfast, my_lunch, dinner)
typeof(meals)
meals$dinner
meals
dinner$meals
meals$dinner
View(meals)
View(meals)
meals$ dinner
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch, "dinner" = dinner)
meals
meals$ dinner
meals[[my_lunch]]
meals[[lunch]]
meals[["lunch"]]
