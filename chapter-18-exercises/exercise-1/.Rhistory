shark_length <- c(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[4]
is.c(shark_length)
print(shark_length)
shark_length <- c(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[4]
# Confirm that you returned a vector and not a list
print[shark_length > 12.6]
$goblin
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
total_with_discount <- (tea + 2*scone) - ((tea + 2*scone)*discount)
total_after_tax <- total_with_discount + (total_after_tax * sales_tax)
total_after_tax <- total_with_discount + (total_with_discount * sales_tax)
round(total_after_tax, 2)
state(shark_length)
shark_length <- shark_length[[4]]
statu(shark_length)
statue(shark_length)
numbers <- seq(1:201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
round(squared_mean, 2)
squared_mean <- mean(squared_numbers)
print(round(squared_mean, 2))
squared_median <- median(squared_median)
squared_median <- median(squared_numbers)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- round(numbers) = sqrt(numbers)
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(round(squared_mean, 2))
squared_median <- median(squared_numbers)
print(squared_median)
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(round(squared_mean, 2))
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- round(numbers) = sqrt(numbers)
perfect_squares <- all.equal(sqrt(numbers), round(numbers))
perfect_squares <- all.equal(sqrt(numbers), round(numbers,0))
perfect_squares <- sqrt(numbers) == round(numbers)
print(perfect_squares)
perfect_squares <- c(sqrt(numbers) == round(numbers))
perfect_squares <- function (numbers, squared_numbers){
squares <- numbers == squared_numbers
return(squares)
}
print(perfect_squares)
print(perfect_squares)
View(perfect_squares)
perfect_squares <- function (numbers, squared_numbers){
squares <- numbers - squared_numbers == 0
return(squares)
}
perfect_squares <- function (numbers, squared_numbers){
squares <- numbers - squared_numbers == 0
return(squares)
}
print(perfect_squares)
perfect_squares <- function (sqrt(numbers){
sqrt(numbers) == round(numbers)
}
perfect_squares <- function (sqrt(numbers)) {
sqrt(numbers) == round(numbers)
}
print(perfect_squares)
perfect_squares <- function (sqrt(numbers)) {
sqrt(numbers) == round(numbers)
}
print(perfect_squares)
perfect_squares <- function (sqrt(numbers)) {
sqrt(numbers) == round(numbers)
}
print(perfect_squares)
perfect_squares <- function (sqrt(numbers)) {
sqrt(numbers) == round(numbers)
}
print(perfect_squares)
perfect_squares <- function (sqrt(numbers)) {
sqrt(numbers) == round(numbers)
}
perfect_squares <- function (numbers) {
numbers == round(sqrt(numbers))
}
perfect_squares <- numbers == round(sqrt(numbers))
print(perfect_squares)
print(perfect_squares)
perfect_squares <- c(numbers == round(sqrt(numbers)))
perfect_squares <- c(numbers == round(sqrt(numbers)))
break <- "2020-03-21"
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
class(spring_break)
today <- Sys.Date()
perfect_squares <- c(numbers == round(sqrt(numbers)))
perfect_squares <- c(numbers == round(sqrt(numbers)))
print(as.numeric(perfect_squares))
today <- "2020-01-21" # a string, human representation
today_date <- as.Date(today) # a computer representation
print(today_date)
as.numeric(today_date)
as.Date(18282, origin = "1970-01-01")
as.numeric(spring_break)
as.Date(18342, origin = today)
as.numeric(today)
today <- Sys.Date()
as.numeric(today)
as.Date(18283, origin = spring_break)
days_to_break <- spring_break - today
print(days_to_break)
# NOT RUN {
substr("abcdef", 2, 4)
substring("abcdef", 1:6, 1:6)
## strsplit is more efficient ...
substr(rep("abcdef", 4), 1:4, 4:5)
x <- c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech")
substr(x, 2, 5)
substring(x, 2, 4:6)
substring(x, 2) <- c("..", "+++")
x
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(data_as_string, 5, 10)
paste(year, month_day)
}
print(change_year(today, 2025))
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(data_as_string, 5, 10)
paste(year, month_day)
change_year(today, 2025)
View(change_year)
View(change_year)
View(change_year)
View(change_year)
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(data_as_string, 5, 10)
new_year <- paste(year, month_day)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
change_year(today, 2025)
change_year(today, "2025")
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(date_as_string, 5, 10)
new_year <- paste(year, month_day)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
change_year(today, "2025")
View(change_year)
print(change_year)
class(change_year)
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(date_as_string, 5, 10)
new_year <- paste(year, month_day)
new_year_as_string <- new_year
return(as.Date(new_year_as_string))
}
change_year(today, "2025")
spring_break_2025 <- change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, "2025")
print(spring_break_2025)
spring_break_2025 <- change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
days_to_break <- spring_break - today
print(days_to_break)
print(days_to_break)
print(days_to_break)
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
class(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
s_break <- "2020-03-21"
s_break <- "2020-03-21"
s_break <- "2020-03-21"
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
class(spring_break_2025)
substr("abcdef", 2, 4)
substring("abcdef", 1:6, 1:6)
## strsplit is more efficient ...
substr(rep("abcdef", 4), 1:4, 4:5)
x <- c("asfef", "qwerty", "yuiop[", "b", "stuff.blah.yech")
substr(x, 2, 5)
substring(x, 2, 4:6)
substring(x, 2) <- c("..", "+++")
x
print(change_year(today, 2025))
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
class(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
books <- c("Romeo and Juliet", "Harry Poter", "Hamlet", "Macbeth", "Othello", "Frankenstein")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(c(books), collapse = " is a great read! ")
print(book_reviews)
remove_book <- function(what_book, num){
what_book <- what_book[-num]
return (what_book)
}
books_without_five = remove_book(books, 5)
print(books_without_five)
long_titiles <- books[nchar(books) > 15]
print(long_titiles)
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
class(spring_break)
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(date_as_string, 5, 10)
new_year <- paste(year, month_day)
new_year_as_string <- as.character(new_year)
return(as.Date(new_year_as_string))
}
spring_break_2025 <- change_year(spring_break, "2025")
print(spring_break_2025)
class(spring_break_2025)
date_has_passed <- function()
books <- c("Romeo and Juliet", "Harry Poter", "Hamlet", "Macbeth", "Othello", "Frankenstein")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(c(books), collapse = " is a great read! ")
print(book_reviews)
remove_book <- function(what_book, num){
what_book <- what_book[-num]
return (what_book)
}
books_without_five = remove_book(books, 5)
print(books_without_five)
long_titiles <- books[nchar(books) > 15]
print(long_titiles)
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
s_break <- "2020-03-21"
spring_break <- as.Date(s_break)
class(spring_break)
days_to_break <- spring_break - today
print(days_to_break)
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(date_as_string, 5, 10)
new_year <- paste(year, month_day)
new_year_as_string <- as.character(new_year)
return(as.Date(new_year_as_string))
}
change_year <- function(date, year){
date_as_string <- as.character(date)
month_day <- substr(date_as_string, 5, 10)
new_year <- paste(year, month_day)
new_year_as_string <- as.character(new_year)
return(as.Date(new_year_as_string))
}
spring_break_2025 <- change_year(spring_break, "2025")
spring_break_2025 <- change_year(spring_break, "2025")
spring_break_2025 <- change_year(spring_break, "2025")
print(spring_break_2025)
perfect_squares <- list(numbers == round(sqrt(numbers)))
perfect_squares <- list(numbers == round(sqrt(numbers)))
date_has_passed(as.Date("2010-01-23"), Sys.Date())
birthdays <- list(Dad = as.Date("1967-02-11"), Mom = as.Date("1970-06-25"))
print(birthdas)
print(birthdays)
analysis.R <- "https://api.themoviedb.org/3"
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Desktop")
source('~/.active-rstudio-document', echo=TRUE)
print(api_key)
source("apikey.R")
library("httr")
library("jsonlite")
setwd("~/Desktop/book-exercises/chapter-18-exercises/exercise-1")
source("apikey.R")
key_param <- list("api-key" = nyt_key )
query_param <- list("api-key" = nyt_key)
source("apikey.R")
data <- fromJSON(body)
query_params <- list("api-key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
end_point <- "reviews/seach.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
end_point <- "reviews/seach.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
end_point <- "reviews/seach.json"
uri <- paste0(base_uri, endpoint)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
base_uri <- "https://api.themoviedb.org/3"
end_point <- "/movie/550?api_key="
source("apikey.R")
key_param <- list(base_uri, end_point, "api-key" = tmdb_key)
View(key_param)
resource <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
base_uri <- "https://api.themoviedb.org/3"
end_point <- "/movie/550?api_key="
uri <- paste0(base_uri, end_point)
source("apikey.R")
key_param <- list("api-key" = tmdb_key)
response <- GET(uri, query = key_param)
get_trending_table(person, week) <- GET(uri,"{media_type}" = person, "{time_window}" = week,  query = key_param)
get_trending_table(person, week) <- GET(uri,"{media_type}" = person, "{time_window}" = week,  query = key_param)
end_point <- "/trending/" + person + "/" + week
end_point <- paste0("/trending/" + person + "/" + week)
print(uri)
end_point <- paste0("/trending/" + person + "/" + week)
get_trending_table() <- GET(uri, query = key_param)
get_trending_table(person, week) <- GET(uri, query = key_param)
end_point <- paste0("/trending/",  person, "/", week)
end_point <- paste0("/trending/",  person, "/", week)
end_point <- paste0("/trending/",  person, "/", week)
get_trending_table(person, week) <- GET(uri, query = key_param)
end_point <- paste0("/trending/",  person, "/", week)
get_trending_table <- function(person, week) {
GET(uri, query = key_param)
}
end_point <- paste0("/trending/",  person, "/", week)
end_point <- paste0("/trending/",  person, "/", week)
get_trending_table <- function(person, week) {
GET(uri, query = key_param)
}
end_point <- paste0("/trending/",  person, "/", week)
get_trending_table <- function(person, week) {
response <- GET(uri, query = key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
}
get_trending_table <- function(person, week) {
response <- GET(uri, query = key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
trending_df <- as.data.frame(data)
return(trending_df)
}
end_point
end_point <- paste0("/trending/",  person, "/", week)
person
View(person)
end_point <- paste0("/trending/", "person", "/")
end_point
end_point <- paste0("/trending/", "person", "/week")
end_point
base_uri + end_point
get_trending_table <- function(person, week) {
end_point <- paste0("/trending/", person, "/", week)
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
trending_df <- as.data.frame(data)
return(trending_df)
}
get_trending_table <- function() {
end_point <- paste0("/trending/person/week")
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
trending_df <- as.data.frame(data)
return(trending_df)
}
get_trending_table()
key_param
print(key_param)
get_trending_table <- function() {
end_point <- paste0("/trending/person/week")
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
print(key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
trending_df <- as.data.frame(data)
return(trending_df)
}
print(key_param)
print(key_param)
key_param
get_trending_table()
response <- GET(uri, query = key_param)
response
uri <- paste0(base_uri, end_point)
uri
response <- GET(uri, query = key_param)
response
get_trending_table <- function() {
end_point <- paste0("/trending/person/week")
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
print(key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
trending_df <- as.data.frame(data)
return(trending_df)
}
get_trending_table
get_trending_table()
body <- content(response, "text", encoding = "UTF-8")
body
body <- content(response, "text")
body
response
body <- content(response, "text")
body
get_trending_table <- function() {
end_point <- paste0("/trending/person/week.json")
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
trending_df <- as.data.frame(data)
return(trending_df)
}
get_trending_table()
response <- GET(uri, query = key_param)
response
body <- content(response, "text", encoding = "UTF-8")
response
uri
key_param
query
end_point <- paste0("/trending/person/week?api_key=")
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
body <- content(response, "text", encoding = "UTF-8")
body
response
end_point <- paste0("/trending/person/week?api_key=")
uri <- paste0(base_uri, end_point)
uri
response <- GET(uri, query = key_param)
response
response <- GET(uri)
response
end_point <- paste0("/trending/person/week")
uri <- paste0(base_uri, end_point)
response <- GET(uri, query = key_param)
response
key_param <- list("api_key" = tmdb_key)
response <- GET(uri, query = key_param)
response
profile_path <- function(img_uri) {
base_point <- "https://image.tmdb.org/t/p/h100"
end_point <- paste0("```![",name ,"](",img_uri, ")")
name <- get_trending_table$Name
return()
}
end_point <- paste0("/search/person")
uri <- paste0(base_uri, end_point)
name <- get_trending_table$Name
name <- get_trending_table$Name
library(jsonlite)
library(dplyr)
library(httr)
library(tidyr)
View(get_trending_table
View(get_trending_table)
